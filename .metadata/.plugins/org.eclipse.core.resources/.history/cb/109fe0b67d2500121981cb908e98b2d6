#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <stdio.h>
#include <unistd.h> /* close */

#define SERVER_PORT 7150
#define MAX_MSG 200

void ReadUserDetails();
void CreateMCNetworkAddresses();
void CreateBindMCSockect();
void JoinMulticastGroup();
void RecieveMC();

int sd, rc, n, cliLen;
struct ip_mreq mreq;
struct sockaddr_in cliAddr, servAddr;
struct in_addr mcastAddr;
struct hostent *h;
char msg[MAX_MSG];
char userName[40];

char *filePath;

char multicastGroup[] = "226.0.10.1";

int main(int argc, char *argv[])
{
	filePath = argv[0];

	ReadUserDetails();

	CreateMCNetworkAddresses();

	CreateBindMCSockect();

	JoinMulticastGroup();

	RecieveMC();

	return 0;

}

void ReadUserDetails()
{
	printf("Name: ");
	scanf("%s", userName);
	printf("%s", userName);
}

void CreateMCNetworkAddresses()
{
	/* get mcast address to listen to */
	h = gethostbyname(multicastGroup);
	if (h == NULL )
	{
		printf("%s : unknown group '%s'\n", filePath, multicastGroup);
		exit(1);
	}

	memcpy(&mcastAddr, h->h_addr_list[0], h->h_length);

	/* check given address is multicast */
	if (!IN_MULTICAST(ntohl(mcastAddr.s_addr)))
	{
		printf("%s : given address '%s' is not multicast\n", filePath,
				inet_ntoa(mcastAddr));
		exit(1);
	}
}

void CreateBindMCSockect(){
	/* create socket */
		sd = socket(AF_INET, SOCK_DGRAM, 0);
		if (sd < 0)
		{
			printf("%s : cannot create socket\n", filePath);
			exit(1);
		}

		/* bind port */
		servAddr.sin_family = AF_INET;
		servAddr.sin_addr.s_addr = htonl(INADDR_ANY );
		servAddr.sin_port = htons(SERVER_PORT);
		if (bind(sd, (struct sockaddr *) &servAddr, sizeof(servAddr)) < 0)
		{
			printf("%s : cannot bind port %d \n", filePath, SERVER_PORT);
			exit(1);
		}
}

void JoinMulticastGroup()
{
	/* join multicast group */
		mreq.imr_multiaddr.s_addr = mcastAddr.s_addr;
		mreq.imr_interface.s_addr = htonl(INADDR_ANY );

		rc = setsockopt(sd, IPPROTO_IP, IP_ADD_MEMBERSHIP, (void *) &mreq,
				sizeof(mreq));
		if (rc < 0)
		{
			printf("%s : cannot join multicast group '%s'", filePath,
					inet_ntoa(mcastAddr));
			exit(1);
		}
}

void RecieveMC()
{
	printf("%s : listening to mgroup %s:%d\n", filePath,
					inet_ntoa(mcastAddr), SERVER_PORT);

	/* infinite receive loop */
	while (1)
	{
		cliLen = sizeof(cliAddr);
		n = recvfrom(sd, msg, MAX_MSG, 0, (struct sockaddr *) &cliAddr,
				&cliLen);
		if (n < n)
		{
			printf("%s : cannot receive data\n", filePath);
			continue;
		}

		printf("%s : from %s:%d on %s : %s\n", filePath,
				inet_ntoa(cliAddr.sin_addr), ntohs(cliAddr.sin_port),
				multicastGroup, msg);
	}/* end of infinite receive loop */
}
